---

- name: Deploy Openstack Instances
  hosts: localhost,
  connection: local

  vars:
    log_count: 0
    haproxy_count: 0
    ironic: false

  tasks:
    - name: Check for required variables
      assert:
        that: item
      with_items:
        - cluster_deploy_version
        - ssh_keyname
        - stor_count
        - client_count
        - external_network
      loop_control:
        label: "Assert {{ item }} is defined"

    - name: Deploy Storage Nodes
      os_server:
        state: present
        name: "ceph-{{ cluster_deploy_version }}-stor-{{ item }}"
        image: "{{ stor_image }}"
        flavor: "{{ stor_flavor }}"
        key_name: "{{ ssh_keyname }}"
        nics:
          - net-name: "{{ external_network }}"
        meta: "instance_role=ceph-{{ cluster_deploy_version }}-storage"
        timeout: 720
        validate_certs: false
        cloud: phobos
      with_sequence: count={{ stor_count }}
      register: storage_nodes

    - name: Deploy log Nodes
      os_server:
        state: present
        name: "ceph-{{ cluster_deploy_version }}-log"
        image: "{{ log_image }}"
        flavor: "{{ log_flavor }}"
        key_name: "{{ ssh_keyname }}"
        nics: "{{ networks }}"
        meta: "instance_role=ceph-{{ cluster_deploy_version }}-log"
        timeout: 720
        validate_certs: false
        cloud: phobos
        userdata: |
          {%- raw -%}#!/bin/bash
          echo "auto ens4" >> /etc/network/interfaces.d/ens4.cfg
          echo "iface ens4 inet dhcp" >> /etc/network/interfaces.d/ens4.cfg
          ifdown ens4 && ifup ens4
          {% endraw %}
      register: log_nodes
      when: log_count|int > 0

    - name: Deploy Haproxy Nodes
      os_server:
        state: present
        name: "ceph-{{ cluster_deploy_version }}-haproxy"
        image: "{{ log_image }}"
        flavor: "{{ log_flavor }}"
        key_name: "{{ ssh_keyname }}"
        nics: "{{ networks }}"
        meta: "instance_role=ceph-{{ cluster_deploy_version }}-haproxy"
        timeout: 720
        validate_certs: false
        cloud: phobos
        userdata: |
          {%- raw -%}#!/bin/bash
          echo "auto ens4" >> /etc/network/interfaces.d/ens4.cfg
          echo "iface ens4 inet dhcp" >> /etc/network/interfaces.d/ens4.cfg
          ifdown ens4 && ifup ens4
          {% endraw %}
      register: haproxy_nodes
      when: haproxy_count|int > 0

    - name: Create Client Server Group
      os_server_group:
        state: present
        name: "ceph-{{ cluster_deploy_version }}-clients"
        policies: "anti-affinity"
        validate_certs: false
        cloud: phobos
      register: client_server_group
      when: client_count|int > 0

    - name: Deploy Client Nodes
      os_server:
        state: present
        name: "ceph-{{ cluster_deploy_version }}-client-{{ item }}"
        image: "{{ log_image }}"
        flavor: "{{ log_flavor }}"
        key_name: "{{ ssh_keyname }}"
        nics: "{{ networks }}"
        meta: "instance_role=ceph-{{ cluster_deploy_version }}-client"
        scheduler_hints: "group={{ client_server_group.id | default('') }}"
        timeout: 720
        validate_certs: false
        cloud: phobos
        userdata: |
          {%- raw -%}#!/bin/bash
          echo "auto ens4" >> /etc/network/interfaces.d/ens4.cfg
          echo "iface ens4 inet dhcp" >> /etc/network/interfaces.d/ens4.cfg
          ifdown ens4 && ifup ens4
          {% endraw %}
      with_sequence: count={{ client_count }}
      register: client_nodes

    - name: Wait for SSH
      command: >
        ssh -o BatchMode=yes
        -o StrictHostKeyChecking=no
        -o UserKnownHostsFile=/dev/null
        -o ConnectTimeout=30
        ubuntu@{{ item.server.addresses.get(external_network)[0].addr }} true
      register: log_ssh_result
      until: log_ssh_result|success
      retries: 300
      delay: 5
      with_items: "{{ log_nodes.results }}"
      when: log_count|int > 0

    - name: Wait for SSH
      command: >
        ssh -o BatchMode=yes
        -o StrictHostKeyChecking=no
        -o UserKnownHostsFile=/dev/null
        -o ConnectTimeout=30
        ubuntu@{{ item.server.addresses.get(external_network)[0].addr }} true
      register: client_ssh_result
      until: client_ssh_result|success
      retries: 300
      delay: 5
      with_items: "{{ client_nodes.results }}"
      when: client_count|int > 0

    - name: Wait for SSH
      command: >
        ssh -o BatchMode=yes
        -o StrictHostKeyChecking=no
        -o UserKnownHostsFile=/dev/null
        -o ConnectTimeout=30
        ubuntu@{{ item.server.addresses.get(external_network)[0].addr }} true
      register: haproxy_ssh_result
      until: haproxy_ssh_result|success
      retries: 300
      delay: 5
      with_items: "{{ haproxy_nodes.results }}"
      when: haproxy_count|int > 0

    - name: Wait for SSH
      command: >
        ssh -o BatchMode=yes
        -o StrictHostKeyChecking=no
        -o UserKnownHostsFile=/dev/null
        -o ConnectTimeout=30
        ubuntu@{{ item.server.addresses.get(external_network)[0].addr }} true
      register: stor_ssh_result
      until: stor_ssh_result|success
      retries: 300
      delay: 5
      with_items: "{{ storage_nodes.results }}"

    - name: Add log_all host group
      add_host:
        name: "{{ log_nodes.server.name }}"
        groups:
          - log_all
          - prometheus
          - grafana
        ansible_host: "{{ log_nodes.server.addresses.get(external_network)[0].addr }}"
        ansible_user: ubuntu
        ansible_become: true
        ansible_ssh_extra_args: -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        ansible_python_interpreter: /usr/bin/python3
        host_id: "{{ log_nodes.server.id }}"
      with_items: "{{ log_nodes.results }}"
      when: log_count|int > 0

    - name: Add log_all host group
      add_host:
        name: "{{ storage_nodes.results[0].server.name }}"
        groups:
          - log_all
          - prometheus
          - grafana
        ansible_host: "{{ storage_nodes.results[0].server.addresses.get(external_network)[0].addr }}"
        ansible_user: ubuntu
        ansible_become: true
        ansible_ssh_extra_args: -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        ansible_python_interpreter: /usr/bin/python3
        host_id: "{{ storage_nodes.results[0].server.id }}"
      when: log_count|int == 0

    - name: Add clients host group
      add_host:
        name: "{{ item.server.name }}"
        groups: clients
        ansible_host: "{{ item.server.addresses.get(external_network)[0].addr }}"
        ansible_user: ubuntu
        ansible_become: true
        ansible_ssh_extra_args: -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        ansible_python_interpreter: /usr/bin/python3
        host_id: "{{ item.server.id }}"
      with_items: "{{ client_nodes.results }}"
      when: client_count|int > 0

    - name: Add haproxy_all host group
      add_host:
        name: "{{ haproxy_nodes.server.name }}"
        groups: haproxy_all
        ansible_host: "{{ haproxy_nodes.server.addresses.get(external_network)[0].addr }}"
        ansible_user: ubuntu
        ansible_become: true
        ansible_ssh_extra_args: -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        ansible_python_interpreter: /usr/bin/python3
        host_id: "{{ haproxy_nodes.server.id }}"
      with_items: "{{ haproxy_nodes.results }}"
      when: haproxy_count|int > 0

    - name: Add osds and rgws host group
      add_host:
        name: "{{ item.server.name }}"
        groups:
          - osds
          - rgws
        ansible_host: "{{ item.server.addresses.get(external_network)[0].addr }}"
        ansible_user: ubuntu
        ansible_become: true
        ansible_ssh_extra_args: -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        ansible_python_interpreter: /usr/bin/python3
        host_id: "{{ item.server.id }}"
      with_items: "{{ storage_nodes.results }}"

    - name: Set fact single monitor
      set_fact:
        mon_nodes:
          - "{{ storage_nodes.results[0] }}"
      when: stor_count|int < 3

    - name: Set fact multiple monitor
      set_fact:
        mon_nodes:
          - "{{ storage_nodes.results[0] }}"
          - "{{ storage_nodes.results[1] }}"
          - "{{ storage_nodes.results[2] }}"
      when: stor_count|int > 2

    - name: Add mgrs and mons host group
      add_host:
        name: "{{ item.server.name }}"
        groups:
          - mgrs
          - mons
        ansible_host: "{{ item.server.addresses.get(external_network)[0].addr }}"
        ansible_user: ubuntu
        ansible_become: true
        ansible_ssh_extra_args: -o BatchMode=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null
        ansible_python_interpreter: /usr/bin/python3
        host_id: "{{ item.server.id }}"
      with_items: "{{ mon_nodes }}"

    - name: Write inventory file
      template:
        src: inventory_file.j2
        dest: "{{ playbook_dir }}/../inventory"

- hosts: osds
  tasks:
    - name: Create VM ceph disks
      local_action:
        module: os_volume
        state: present
        cloud: phobos
        size: "{{ phobos_disk_size | default(5) }}"
        display_name: "{{ inventory_hostname }}-{{ item.split('/')[2] | lower }}"
        volume_type: rbd
        validate_certs: false
      with_items: "{{ dedicated_devices | default([]) }} + {{ devices }}"
      when: not ironic

    - name: Attach volumes to VMs
      local_action:
        module: os_server_volume
        state: present
        cloud: phobos
        server: "{{ inventory_hostname }}"
        volume: "{{ inventory_hostname }}-{{ item.split('/')[2] | lower }}"
        validate_certs: false
      with_items: "{{ dedicated_devices | default([]) }} + {{ devices }}"
      when: not ironic
